{"version":3,"sources":["Header/Header.js","Searchbar/Searchbar.js","Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Searchbar","state","fSearch","printType","bookType","handleInputChange","ev","setState","target","name","value","handleSubmit","event","preventDefault","url","apiUrl","params","Object","keys","map","key","encodeURIComponent","join","formatQueryParams","q","apiKey","console","log","fetch","then","res","ok","Error","json","data","price","snippet","books","items","i","saleInfo","retailPrice","amount","searchInfo","textSnippet","title","volumeInfo","photoUrl","imageLinks","thumbnail","author","authors","props","setBooks","catch","err","error","message","htmlFor","type","id","placeholder","this","onChange","onClick","Results","index","src","alt","App","selected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8784367.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\n\nclass Header extends React.Component {\n    render() { \n        return ( \n            <div className=\"banner\">\n                <h1 className=\"header\">Google Book Search</h1>\n            </div>\n         );\n    }\n}\n \nexport default Header","import React from 'react';\nimport './Searchbar.css'\n\nclass Searchbar extends React.Component {\n        state = {\n            fSearch: \"\",\n            printType: \"\",\n            bookType: \"\",\n        };\n\n    handleInputChange = ev => {\n        this.setState({\n            [ev.target.name]: ev.target.value\n        })\n    }\n//handleSearch would be better\n    handleSubmit = (event) => {\n        event.preventDefault()\n        // const params = {\n        //     fSearch: this.state.fSearch,\n        //     printType: this.state.printType,\n        //     bookType: this.state.bookType\n        // }  \n        const { fSearch, printType, bookType} = this.state;\n        const apiKey = 'AIzaSyDd5WcR9XrtFRYDLuDAoHIQW6HGtEzi1ds';\n        const apiUrl = 'https://www.googleapis.com/books/v1/volumes';\n        const params = { q: fSearch, printType, bookType, apiKey};\n        \n        const queryString = formatQueryParams(params)\n        const url = apiUrl + '?' + queryString\n        console.log(url)\n        function formatQueryParams(params) {\n            const queryItems = Object.keys(params)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n            return queryItems.join('&');\n        }\n\n        fetch(url)\n            .then(res => {\n            if(!res.ok) {\n            throw new Error('Please try later')\n        } return res;\n        })\n            .then(res => res.json())\n            .then(data => {\n            console.log(data)\n            let price\n            let snippet\n             const books = data.items.map(i => {\n                    \n                    i.saleInfo.retailPrice \n                    ? price = i.saleInfo.retailPrice.amount \n                    : price = 'no pricing information available';\n\n                    i.searchInfo\n                    ? snippet = i.searchInfo.textSnippet\n                    : snippet = 'no snippet available';\n\n                    return {\n                        title: i.volumeInfo.title, \n                        photoUrl: i.volumeInfo.imageLinks.thumbnail, \n                        author: i.volumeInfo.authors, \n                        price,\n                        snippet\n                    }\n                })\n            this.props.setBooks(books)\n        }) \n        .catch(err => {\n        this.setState({\n        error: err.message\n      })\n\n    })\n\n    this.setState({\n            fSearch: \"\",\n            printType: \"\",\n            bookType: \"\"\n        })\n    }\n    \n    render() {\n        return (\n            <form className=\"Searchbar\">\n                <label htmlFor=\"search\">Search: </label>\n                <input \n                    type=\"text\" \n                    name=\"fSearch\" \n                    id=\"search\" \n                    placeholder=\"Enter a book title\"\n                    value={this.state.fSearch}\n                    onChange={ev => this.handleInputChange(ev)}\n                ></input>\n               \n                <label htmlFor=\"print-type\">Print Type: </label>\n                    <select\n                        name=\"printType\"\n                        value={this.state.printType}\n                        onChange={ev => this.handleInputChange(ev)}\n                    >\n                        <option>--Select--</option>\n                        <option>all</option>\n                        <option>books</option>\n                        <option>magazines</option>\n                    </select>\n                    <label htmlFor=\"book-type\">Book Type: </label>\n                    <select\n                        name=\"bookType\"\n                        value={this.state.bookType}\n                        onChange={ev => this.handleInputChange(ev)}\n                    >\n                        {/* <option>No filter</option> */}\n                        <option>--Select--</option>\n                        <option>free-ebooks</option>\n                        <option>paid-ebooks</option>\n                    </select>\n                    <br />\n                    <button\n                    onClick={(ev) => this.handleSubmit(ev)}\n                >Search</button>\n            </form>\n        )\n    }\n}\n\nexport default Searchbar","import React from 'react'\nimport './Results.css'\n// import ResultCard from '../ResultCard/ResultCard'\n\nclass Results extends React.Component { \n    render() {\n        \n        const books = this.props.books.map((i, index) => {\n            return ( \n                <div key={index} className=\"result-card\">\n                    <h3>{i.title}</h3>\n                    <div className=\"results-innards\">\n                        <img src={i.photoUrl} alt=\"\"/>\n                        <div className=\"results-text\">\n                            <h4>AUTHOR: {i.author}</h4>\n                            <p>{i.price}</p>\n                            <p>{i.snippet}</p>\n                        </div>\n                    </div>\n                </div>\n            )\n        })\n        return (\n            <div>\n                {books}\n            </div>\n        )\n    }\n}\n\nexport default Results","import React from 'react'\nimport './App.css'\nimport Header from './Header/Header'\nimport Searchbar from './Searchbar/Searchbar'\n\nimport Results from './Results/Results'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state ={\n      books: [],\n      selected: null,\n    }\n  }\n\n  // displayResults() {\n  //   this.setState({\n  //     books: [...this.state]\n  //   })\n  // }\n  \n  setBooks = (books) => {\n    console.log(books)\n    this.setState({\n      books\n    })\n  } \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Searchbar \n          setBooks={this.setBooks}\n          // onSubmit={data => displayResults(data)}\n        />\n        <h1>Results:</h1>\n        <Results \n          books={this.state.books}\n        />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}